[
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "User", 
  "modified": "2019-04-15 11:28:52.887352", 
  "name": "User-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "frappe.ui.form.on('User', {\n    before_load: function(frm) {\n        var update_tz_select = function(user_language) {\n            frm.set_df_property(\"time_zone\", \"options\", [\"\"].concat(frappe.all_timezones));\n        }\n\n        if(!frappe.all_timezones) {\n            frappe.call({\n                method: \"frappe.core.doctype.user.user.get_timezones\",\n                callback: function(r) {\n                    frappe.all_timezones = r.message.timezones;\n                    update_tz_select();\n                }\n            });\n        } else {\n            update_tz_select();\n        }\n\n    },\n\n    role_profile_name: function(frm) {\n        if(frm.doc.role_profile_name) {\n            frappe.call({\n                \"method\": \"frappe.core.doctype.user.user.get_role_profile\",\n                args: {\n                    role_profile: frm.doc.role_profile_name\n                },\n                callback: function (data) {\n                    frm.set_value(\"roles\", []);\n                    $.each(data.message || [], function(i, v){\n                        var d = frm.add_child(\"roles\");\n                        d.role = v.role;\n                    });\n                    frm.roles_editor.show();\n                }\n            });\n        }\n    },\n\n    onload: function(frm) {\n        frm.can_edit_roles = has_common(frappe.user_roles, [\"Administrator\", \"System Manager\", \"Local Admin\"]);\n\n        if(frm.can_edit_roles && !frm.is_new()) {\n            if(!frm.roles_editor) {\n                var role_area = $('<div style=\"min-height: 300px\">')\n                    .appendTo(frm.fields_dict.roles_html.wrapper);\n                frm.roles_editor = new frappe.RoleEditor(role_area, frm, frm.doc.role_profile_name ? 1 : 0);\n\n                var module_area = $('<div style=\"min-height: 300px\">')\n                    .appendTo(frm.fields_dict.modules_html.wrapper);\n                frm.module_editor = new frappe.ModuleEditor(frm, module_area);\n            } else {\n                frm.roles_editor.show();\n            }\n        }\n    },\n    refresh: function(frm) {\n        var doc = frm.doc;\n        if(!frm.is_new() && !frm.roles_editor && frm.can_edit_roles) {\n            frm.reload_doc();\n            return;\n        }\n        if(doc.name===frappe.session.user && !doc.__unsaved\n            && frappe.all_timezones\n            && (doc.language || frappe.boot.user.language)\n            && doc.language !== frappe.boot.user.language) {\n            frappe.msgprint(__(\"Refreshing...\"));\n            window.location.reload();\n        }\n\n        frm.toggle_display(['sb1', 'sb3', 'modules_access'], false);\n\n        if(!frm.is_new()) {\n            \n\n            if(has_common(frappe.user_roles, [\"Administrator\", \"System Manager\", \"Local Admin\"])) {\n\n                frm.add_custom_button(__(\"Set User Permissions\"), function() {\n                    frappe.route_options = {\n                        \"user\": doc.name\n                    };\n                    frappe.set_route('List', 'User Permission');\n                }, __(\"Permissions\"))\n\n                frm.add_custom_button(__('View Permitted Documents'),\n                    () => frappe.set_route('query-report', 'Permitted Documents For User',\n                        {user: frm.doc.name}), __(\"Permissions\"));\n\n                frm.toggle_display(['sb1', 'sb3', 'modules_access'], true);\n            }\n\n            frm.add_custom_button(__(\"Reset Password\"), function() {\n                frappe.call({\n                    method: \"frappe.core.doctype.user.user.reset_password\",\n                    args: {\n                        \"user\": frm.doc.name\n                    }\n                })\n            }, __(\"Password\"));\n\n            frm.add_custom_button(__(\"Reset OTP Secret\"), function() {\n                frappe.call({\n                    method: \"frappe.core.doctype.user.user.reset_otp_secret\",\n                    args: {\n                        \"user\": frm.doc.name\n                    }\n                })\n            }, __(\"Password\"));\n\n            frm.trigger('enabled');\n\n            if (frm.roles_editor && frm.can_edit_roles) {\n                frm.roles_editor.disable = frm.doc.role_profile_name ? 1 : 0;\n                frm.roles_editor.show();\n            }\n\n            frm.module_editor && frm.module_editor.refresh();\n\n            if(frappe.session.user==doc.name) {\n                // update display settings\n                if(doc.user_image) {\n                    frappe.boot.user_info[frappe.session.user].image = frappe.utils.get_file_link(doc.user_image);\n                }\n            }\n        }\n        \n\n        if (frappe.route_flags.unsaved===1){\n            delete frappe.route_flags.unsaved;\n            for ( var i=0;i<frm.doc.user_emails.length;i++) {\n                frm.doc.user_emails[i].idx=frm.doc.user_emails[i].idx+1;\n            }\n            cur_frm.dirty();\n        }\n\n    },\n    validate: function(frm) {\n        if(frm.roles_editor) {\n            frm.roles_editor.set_roles_in_table()\n        }\n    },\n    enabled: function(frm) {\n        var doc = frm.doc;\n        if(!frm.is_new() && has_common(frappe.user_roles, [\"Administrator\", \"System Manager\", \"Local Admin\"])) {\n            frm.toggle_display(['sb1', 'sb3', 'modules_access'], doc.enabled);\n            frm.set_df_property('enabled', 'read_only', 0);\n        }\n\n        if(frappe.session.user!==\"Administrator\") {\n            frm.toggle_enable('email', frm.is_new());\n        }\n    },\n    create_user_email:function(frm) {\n        frappe.call({\n            method: 'frappe.core.doctype.user.user.has_email_account',\n            args: {\n                email: frm.doc.email\n            },\n            callback: function(r) {\n                if (r.message == undefined) {\n                    frappe.route_options = {\n                        \"email_id\": frm.doc.email,\n                        \"awaiting_password\": 1,\n                        \"enable_incoming\": 1\n                    };\n                    frappe.model.with_doctype(\"Email Account\", function (doc) {\n                        var doc = frappe.model.get_new_doc(\"Email Account\");\n                        frappe.route_flags.linked_user = frm.doc.name;\n                        frappe.route_flags.delete_user_from_locals = true;\n                        frappe.set_route(\"Form\", \"Email Account\", doc.name);\n                    })\n                } else {\n                    frappe.route_flags.create_user_account = frm.doc.name;\n                    frappe.set_route(\"Form\", \"Email Account\", r.message[0][\"name\"]);\n                }\n            }\n        })\n    }\n})\n\n\nfrappe.ModuleEditor = Class.extend({\n    init: function(frm, wrapper) {\n        this.wrapper = $('<div class=\"row module-block-list\"></div>').appendTo(wrapper);\n        this.frm = frm;\n        this.make();\n    },\n    make: function() {\n        var me = this;\n        this.frm.doc.__onload.all_modules.forEach(function(m) {\n            $(repl('<div class=\"col-sm-6\"><div class=\"checkbox\">\\\n                <label><input type=\"checkbox\" class=\"block-module-check\" data-module=\"%(module)s\">\\\n                %(module)s</label></div></div>', {module: m})).appendTo(me.wrapper);\n        });\n        this.bind();\n    },\n    refresh: function() {\n        var me = this;\n        this.wrapper.find(\".block-module-check\").prop(\"checked\", true);\n        $.each(this.frm.doc.block_modules, function(i, d) {\n            me.wrapper.find(\".block-module-check[data-module='\"+ d.module +\"']\").prop(\"checked\", false);\n        });\n    },\n    bind: function() {\n        var me = this;\n        this.wrapper.on(\"change\", \".block-module-check\", function() {\n            var module = $(this).attr('data-module');\n            if($(this).prop(\"checked\")) {\n                // remove from block_modules\n                me.frm.doc.block_modules = $.map(me.frm.doc.block_modules || [], function(d) { if(d.module != module){ return d } });\n            } else {\n                me.frm.add_child(\"block_modules\", {\"module\": module});\n            }\n        });\n    }\n})", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Supplier", 
  "modified": "2019-04-18 14:39:34.085071", 
  "name": "Supplier-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "frappe.ui.form.on(\"Supplier\", {\n\tonload_post_render: function(frm){\n\t\tif(frm.doc.alias && !frm.doc.__islocal && frm.doc.name != frm.doc.alias){\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"frappe.client.rename_doc\",\n\t\t\t\targs: {\n\t\t\t\t\t'doctype': frm.doc.doctype,\n\t\t\t\t\t'old_name': frm.doc.name,\n\t\t\t\t\t'new_name': frm.doc.alias\n\t\t\t\t},\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message){\n\t\t\t\t\t\tfrappe.set_route('Form', 'Supplier', r.message)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Customer", 
  "modified": "2019-06-14 14:40:27.171181", 
  "name": "Customer-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "frappe.ui.form.on(\"Customer\", {\n\tonload_post_render: function(frm){\n\t\tif(frm.doc.alias && !frm.doc.__islocal && frm.doc.name != frm.doc.alias){\n\t\t\tfrappe.call({\n\t\t\t\tmethod: \"frappe.client.rename_doc\",\n\t\t\t\targs: {\n\t\t\t\t\t'doctype': frm.doc.doctype,\n\t\t\t\t\t'old_name': frm.doc.name,\n\t\t\t\t\t'new_name': frm.doc.alias\n\t\t\t\t},\n\t\t\t\tcallback: function(r){\n\t\t\t\t\tif(r.message){\n\t\t\t\t\t\tfrappe.set_route('Form', 'Customer', r.message)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t},\n\tbefore_save: function(frm){\n\t\tif((frm.doc.accounts == undefined || !frm.doc.accounts.length) && frm.doc.default_currency != undefined){\n            if (frm.doc.default_currency == 'USD') {\n                let accounts = frm.add_child('accounts');\n                accounts.company = frappe.defaults.get_user_default(\"Company\");\n                frappe.db.get_value(\"Company\", accounts.company, 'abbr', function (r) {\n                    accounts.account = 'Debtor USD - ' + r.abbr;\n                });\n                }\n            else if(frm.doc.default_currency == 'EUR'){\n                let accounts = frm.add_child('accounts');\n                accounts.company = frappe.defaults.get_user_default(\"Company\");\n                frappe.db.get_value(\"Company\", accounts.company, 'abbr', function (r) {\n                    accounts.account = 'Debtors EUR - ' + r.abbr;\n                });\n            }\n\t\t\tfrm.refresh_field('accounts');\n\t\t} \n\t}\n\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Fiscal Year", 
  "modified": "2019-04-22 10:25:17.704459", 
  "name": "Fiscal Year-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "frappe.ui.form.on(\"Fiscal Year\", {\n\tbefore_save: function(frm){\n\t\tlet start_year = frm.doc.year_start_date.split(\"-\")[0].slice(2);\n\t\tlet end_year = frm.doc.year_end_date.split(\"-\")[0].slice(2);\n\n\t\tlet fiscal = start_year + end_year;\n\t\tfrm.set_value(\"fiscal\", fiscal);\n\t}\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "BOM", 
  "modified": "2019-06-11 11:00:59.872817", 
  "name": "BOM-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "frappe.ui.form.on(\"BOM\", {\n\tbefore_save: function(frm) {\n\t\tfrm.trigger(\"cal_operational_cost\");\n\t\tlet unit_qty = flt(frm.doc.total_cost / frm.doc.quantity);\n\t\tfrm.set_value(\"per_unit_price\", unit_qty);\t\n\t},\n\tonload: function(frm){\n\t\tif(frm.doc.__islocal && frm.doc.rm_cost_as_per == \"Price List\"){\n\t\t\tfrm.set_value(\"buying_price_list\",\"Standard Buying\");\n\t\t}\n\t},\n\tcal_operational_cost: function(frm){\n\t\tlet op_cost = flt(frm.doc.operational_cost * frm.doc.quantity);\n\t\tlet total_cost = flt(op_cost + frm.doc.total_cost)\n\t\tfrm.set_value(\"total_operational_cost\",flt(op_cost));\n\t\tfrm.set_value(\"total_cost\",total_cost);\n\t\tfrm.set_value(\"per_unit_price\",flt(total_cost/ frm.doc.quantity));\n\t},\n\t\n\toperational_cost:function(frm){\n\t\tfrm.set_value(\"total_operational_cost\",flt(frm.doc.operational_cost * frm.doc.quantity));\n\t},\n\t\n\ttotal_operational_cost: function(frm){\n\t\tfrm.set_value(\"total_cost\",flt(frm.doc.total_operational_cost + frm.doc.raw_material_cost + frm.doc.spray_drying_cost - frm.doc.scrap_material_cost));\n\t},\n\t\n\ttotal_cost:function(frm){\n\t\tfrm.set_value(\"per_unit_price\",flt(frm.doc.total_cost/ frm.doc.quantity));\n\t},\n\t\n\t// refresh: function(frm){\n\t// \tif(!frm.doc.__islocal){\n\t// \t\tfrm.add_custom_button(__(\"Update Price List\"), function() {\n\t// \t\t\tfrm.events.update_price_list(frm);\n\t// \t\t});\n\t// \t}\n\t// },\n\n\tbefore_submit: function(frm){\n\t\tlet cal_yield = 0;\n\t\tfrm.doc.items.forEach(function(d) {\n\t\t\tif(frm.doc.based_on == d.item_code){\n\t\t\t\tcal_yield = frm.doc.quantity/d.qty;\n\t\t\t}\n\t\t\telse if(!frm.doc.based_on && d.item_code==\"Vinyl Sulphone (V.S)\"){\n\t\t\t\tcal_yield = frm.doc.quantity/d.qty;\n\t\t\t}\n\t\t});\n\t\tfrm.set_value(\"batch_yield\",cal_yield);\n\t},\n\n\tupdate_price_list: function(frm){\n\t\tfrappe.call({\n\t\t\tmethod:\"chemical.query.update_bom_price\",\n\t\t\targs:{\n\t\t\t\tbom: frm.doc.name\n\t\t\t},\n\t\t\tcallback: function(r){\n\t\t\t\tfrm.refresh_field('per_unit_price');\n\t\t\t}\n\t\t});\n\t},\n\t\n\tupdate_cost: function(frm) {\n\t\treturn frappe.call({\n\t\t\tdoc: frm.doc,\n\t\t\tmethod: \"update_cost\",\n\t\t\tfreeze: true,\n\t\t\targs: {\n\t\t\t\tupdate_parent: true,\n\t\t\t\tfrom_child_bom:false,\n\t\t\t\tsave: true\n\t\t\t},\n\t\t\tcallback: function(r) {\n\t\t\t\tfrm.events.update_price_list(frm);\n\t\t\t\trefresh_field(\"items\");\n\t\t\t\tif(!r.exc) frm.refresh_fields();\n\t\t\t}\n\t\t});\n\t},\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Stock Entry", 
  "modified": "2019-06-14 16:52:49.718756", 
  "name": "Stock Entry-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "\nthis.frm.add_fetch('batch_no', 'lot_no', 'lot_no');\nthis.frm.add_fetch('batch_no', 'packaging_material', 'packaging_material');\nthis.frm.add_fetch('batch_no', 'packing_size', 'packing_size');\nthis.frm.add_fetch('batch_no', 'batch_yield', 'batch_yield');\nthis.frm.add_fetch('batch_no', 'concentration', 'concentration');\nthis.frm.add_fetch('item_code', 'item_group', 'item_group');\n\n// Add searchfield to Item query\nthis.frm.cscript.onload = function (frm) {\n    this.frm.set_query(\"batch_no\", \"items\", function (doc, cdt, cdn) {\n        let d = locals[cdt][cdn];\n        if (!d.item_code) {\n            frappe.msgprint(__(\"Please select Item Code\"));\n        }\n        else if (!d.s_warehouse) {\n            frappe.msgprint(__(\"Please select source warehouse\"));\n        }\n        else {\n            return {\n                query: \"chemical.query.get_batch_no\",\n                filters: {\n                    'item_code': d.item_code,\n                    'warehouse': d.s_warehouse\n                }\n            }\n        }\n    });\n}\n\nfrappe.ui.form.on(\"Stock Entry\", {\n    validate: function (frm) {\n        if (frm.doc.__islocal) {\n            //frm.events.get_raw_materials(frm);\n        }\n    },\n    before_save: function (frm) {\n        frm.trigger('cal_qty');\n        if (frm.doc.volume) {\n            let cost = flt(frm.doc.volume * frm.doc.volume_rate);\n            frm.set_value('volume_cost', cost);\n        }\n        frappe.db.get_value(\"Company\", frm.doc.company, 'abbr', function (r) {\n            if (frm.doc.is_opening == \"Yes\") {\n                $.each(frm.doc.items || [], function (i, d) {\n                    d.expense_account = 'Temporary Opening - ' + r.abbr;\n                });\n            }\n        });\n        if (frm.doc.purpose == \"Manufacture\" && frm.doc.work_order) {\n            if (frm.doc.additional_costs.length == 0 && frm.doc.volume_cost) {\n                var m = frm.add_child(\"additional_costs\");\n                m.description = \"Spray Drying Cost\";\n                m.amount = frm.doc.volume_cost;\n            }\n        }\n        if (frm.doc.purpose == \"Manufacture\" && frm.doc.work_order) {\n            frm.call({\n                method: 'get_stock_and_rate',\n                doc: frm.doc\n            });\n        }\n    },\n    set_basic_rate: function (frm, cdt, cdn) {\n        const item = locals[cdt][cdn];\n        if (item.t_warehouse) {\n            return\n        }\n        item.transfer_qty = flt(item.qty) * flt(item.conversion_factor);\n\n        let batch = '';\n        if (!item.t_warehouse) {\n            batch = item.batch_no;\n        }\n\n        const args = {\n            'item_code': item.item_code,\n            'posting_date': frm.doc.posting_date,\n            'posting_time': frm.doc.posting_time,\n            'warehouse': cstr(item.s_warehouse) || cstr(item.t_warehouse),\n            'serial_no': item.serial_no,\n            'company': frm.doc.company,\n            'qty': item.s_warehouse ? -1 * flt(item.transfer_qty) : flt(item.transfer_qty),\n            'voucher_type': frm.doc.doctype,\n            'voucher_no': item.name,\n            'allow_zero_valuation': 1,\n            'batch_no': batch || ''\n        };\n\n        if (item.item_code || item.serial_no) {\n            frappe.call({\n                method: \"erpnext.stock.utils.get_incoming_rate\",\n                args: {\n                    args: args\n                },\n                callback: function (r) {\n                    frappe.model.set_value(cdt, cdn, 'basic_rate', (r.message || 0.0));\n                    frm.events.calculate_basic_amount(frm, item);\n                }\n            });\n        }\n    },\n    get_raw_materials: function (frm) {\n        if (frm.doc.purpose == 'Manufacture' && frm.doc.work_order) {\n            frappe.call({\n                method: \"chemical.chemical.doctype.material_transfer_instruction.material_transfer_instruction.get_raw_materials\",\n                args: {\n                    work_order: frm.doc.work_order,\n                },\n                callback: function (r) {\n                    if (r.message) {\n                        let last_item = frm.doc.items[frm.doc.items.length - 1];\n                        frm.clear_table('items');\n                        r.message.forEach(function (d) {\n                            let item_child = frm.add_child('items');\n                            for (var key in d) {\n                                item_child[key] = d[key];\n                            }\n                        });\n                        let item_child = frm.add_child('items');\n                        for (var key in last_item) {\n                            if (!in_list(['idx', 'name'], key)) {\n                                item_child[key] = last_item[key];\n                            }\n                        }\n                        // item_child = last_item;\n                        frm.refresh_field('items');\n\n                        frm.call({\n                            method: 'get_stock_and_rate',\n                            doc: frm.doc\n                        })\n                    }\n                }\n            })\n        }\n    },\n    volume_rate: function (frm) {\n        let cost = flt(frm.doc.volume * frm.doc.volume_rate);\n        frm.set_value('volume_cost', cost);\n    },\n    volume: function (frm) {\n        let cost = flt(frm.doc.volume * frm.doc.volume_rate);\n        frm.set_value('volume_cost', cost);\n    },\n    cal_qty: function (frm) {\n        let qty = 0;\n        frm.doc.items.forEach(function (d) {\n            if (d.batch_no) {\n                frappe.db.get_value(\"Batch\", d.batch_no, ['packaging_material', 'packing_size', 'lot_no', 'batch_yield', 'concentration'], function (r) {\n                    frappe.model.set_value(d.doctype, d.name, 'packaging_material', r.packaging_material);\n                    frappe.model.set_value(d.doctype, d.name, 'packing_size', r.packing_size);\n                    frappe.model.set_value(d.doctype, d.name, 'lot_no', r.lot_no);\n                    frappe.model.set_value(d.doctype, d.name, 'batch_yield', r.batch_yield);\n                    frappe.model.set_value(d.doctype, d.name, 'concentration', r.concentration);\n                })\n            }\n            if (d.no_of_packages) {\n                if (d.item_group == \"Raw Material\") {\n                    qty = (flt(d.packing_size) * flt(d.no_of_packages) * flt(d.concentration)) / 100;\n                }\n                else {\n                    qty = (flt(d.packing_size) * flt(d.no_of_packages));\n                }\n                frappe.model.set_value(d.doctype, d.name, \"qty\", qty);\n            }\n\n        });\n    },\n});\n\nfrappe.ui.form.on(\"Stock Entry Detail\", {\n    form_render: function (frm, cdt, cdn) {\n        let d = locals[cdt][cdn];\n        var item_grid = frm.get_field('items').grid;\n        let batch_no = item_grid.grid_rows[d.idx - 1].get_field('batch_no');\n        if (!in_list([\"Material Issue\", \"Material Transfer\", \"Material Transfer for Manufacture\"], frm.doc.purpose)) {\n            if (d.s_warehouse) {\n                batch_no.df.read_only = 0;\n            }\n            else if (d.t_warehouse) {\n                batch_no.df.read_only = 1;\n            }\n        }\n        frm.refresh_field('items');\n    },\n    s_warehouse: function (frm, cdt, cdn) {\n        let d = locals[cdt][cdn];\n        var item_grid = frm.get_field('items').grid;\n        let batch_no = item_grid.grid_rows[d.idx - 1].get_field('batch_no');\n        if (!in_list([\"Material Issue\", \"Material Transfer\", \"Material Transfer for Manufacture\"], frm.doc.purpose)) {\n            if (d.s_warehouse) {\n                batch_no.df.read_only = 0;\n            }\n            else if (d.t_warehouse) {\n                batch_no.df.read_only = 1;\n            }\n        }\n        frm.refresh_field('items');\n    },\n    t_warehouse: function (frm, cdt, cdn) {\n        let d = locals[cdt][cdn];\n        var item_grid = frm.get_field('items').grid;\n        let batch_no = item_grid.grid_rows[d.idx - 1].get_field('batch_no');\n        if (!in_list([\"Material Issue\", \"Material Transfer\", \"Material Transfer for Manufacture\"], frm.doc.purpose)) {\n            if (d.s_warehouse) {\n                batch_no.df.read_only = 0;\n            }\n            else if (d.t_warehouse) {\n                batch_no.df.read_only = 1;\n            }\n        }\n        frm.refresh_field('items');\n    },\n\n    conversion_factor: function (frm, cdt, cdn) {\n        frm.events.set_basic_rate(frm, cdt, cdn);\n    },\n\n    qty: function (frm, cdt, cdn) {\n        let d = locals[cdt][cdn];\n\n        frm.events.set_serial_no(frm, cdt, cdn, () => {\n            frm.events.set_basic_rate(frm, cdt, cdn);\n        });\n\n        if (!d.s_warehouse && d.t_warehouse) {\n            frm.set_value('fg_completed_qty', d.qty);\n        }\n    },\n});\n\nerpnext.stock.select_batch_and_serial_no = (frm, item) => {\n\n}", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Work Order", 
  "modified": "2019-06-14 17:22:17.695613", 
  "name": "Work Order-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "frappe.require(\"/assets/chemical/js/override_make_se.js\");\n\n\nthis.frm.add_fetch('bom_no', 'based_on', 'based_on');\nthis.frm.add_fetch('bom_no', 'batch_yield', 'batch_yield');\n\n/* cur_frm.cscript.onload = function(){\n\tcur_frm.fields_dict.production_item.get_query = function(){\n\t\treturn {\n\t\t\t\"filters\": {\n\t\t\t\t'item_group': 'SEMI FINISHED DYES'\n\t\t\t}\n\t\t}\n\t}\n} */\n\nfrappe.ui.form.on(\"Work Order\", {\n    refresh: function (frm) {\n        if (frm.doc.skip_transfer && frm.doc.docstatus == 1 && frm.doc.status == \"Not Started\") {\n            if (flt(frm.doc.material_transferred_for_instruction) < flt(frm.doc.qty)) {\n                frm.has_start_btn = true;\n                var start_btn = frm.add_custom_button(__('Start'), function () {\n                    frm.events.make_transfer(frm);\n                });\n                start_btn.addClass('btn-primary');\n                frm.remove_custom_button('Finish');\n                frm.remove_custom_button('Make Timesheet');\n            }\n        }\n    },\n    before_save: function (frm) {\n        if (frm.doc.based_on_qty) {\n            let qty = flt(frm.doc.batch_yield * frm.doc.based_on_qty);\n            frm.set_value('qty', qty);\n        }\n        if (frm.doc.volume) {\n            cost = flt(frm.doc.volume * frm.doc.volume_rate);\n            frm.set_value('volume_cost', cost);\n        }\n    },\n    bom_no: function (frm) {\n        frappe.db.get_value(\"BOM\", frm.doc.bom_no, [\"based_on\", \"batch_yield\"], function (r) {\n            if (r) {\n                frm.set_value(\"based_on\", r.based_on);\n                frm.set_value(\"batch_yield\", r.batch_yield);\n            }\n        });\n    },\n\n    based_on: function (frm) {\n        if (frm.doc.based_on) {\n            cur_frm.set_df_property('based_on_qty', 'label', cstr(frm.doc.based_on) + \" Qty\");\n        }\n    },\n\n    based_on_qty: function (frm) {\n        if (!frm.doc.based_on) {\n            frappe.db.get_value(\"BOM\", frm.doc.bom_no, \"based_on\", function (r) {\n                if (r) {\n                    frm.set_value(\"based_on\", r.based_on)\n                }\n            });\n        } else {\n            let qty = flt(frm.doc.batch_yield * frm.doc.based_on_qty);\n            frm.set_value('qty', flt(qty, precision(\"qty\")));\n        }\n    },\n    volume_rate: function (frm) {\n        cost = flt(frm.doc.volume * frm.doc.volume_rate);\n        frm.set_value('volume_cost', cost);\n    },\n    volume: function (frm) {\n        cost = flt(frm.doc.volume * frm.doc.volume_rate);\n        frm.set_value('volume_cost', cost);\n    },\n    make_transfer: function (frm) {\n        var max_qty = flt(frm.doc.qty) - flt(frm.doc.material_transferred_for_instruction);\n\n        max_qty = flt(max_qty, precision(\"qty\"));\n\n        frappe.call({\n            method: \"chemical.chemical.doctype.material_transfer_instruction.material_transfer_instruction.make_material_transfer\",\n            args: {\n                \"work_order_id\": frm.doc.name,\n                \"qty\": max_qty\n            },\n            callback: function (r) {\n                var doclist = frappe.model.sync(r.message);\n                frappe.set_route(\"Form\", doclist[0].doctype, doclist[0].name);\n            }\n        });\n    },\n    show_progress: function (frm) {\n        var bars = [];\n        var message = '';\n        var added_min = false;\n\n        // produced qty\n        var title = __('{0} items produced', [frm.doc.produced_qty]);\n        bars.push({\n            'title': title,\n            'width': (frm.doc.produced_qty / frm.doc.qty * 100) + '%',\n            'progress_class': 'progress-bar-success'\n        });\n        if (bars[0].width == '0%') {\n            bars[0].width = '0.5%';\n            added_min = 0.5;\n        }\n        message = title;\n        // pending qty\n        if (frm.doc.skip_transfer && frm.doc.material_transferred_for_instruction) {\n            var pending_complete = frm.doc.material_transferred_for_instruction - frm.doc.produced_qty;\n            if (pending_complete) {\n                var title = __('{0} items in progress', [pending_complete]);\n                var width = ((pending_complete / frm.doc.qty * 100) - added_min);\n                bars.push({\n                    'title': title,\n                    'width': (width > 100 ? \"99.5\" : width) + '%',\n                    'progress_class': 'progress-bar-warning'\n                })\n                message = message + '. ' + title;\n            }\n        }\n        let bar = cur_frm.dashboard.progress_area.find('div')[0];\n        bar.hidden = true;\n\n        let p = cur_frm.dashboard.progress_area.find('p')[0];\n        p.hidden = true;\n        frm.dashboard.add_progress(__('Status'), bars, message);\n    },\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "BOM Update Tool", 
  "modified": "2019-06-13 19:03:25.137309", 
  "name": "BOM Update Tool-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "frappe.ui.form.on(\"BOM Update Tool\", {\n\tupdate_latest_price_in_all_boms: function() {\n\t\tfrappe.call({\n\t\t\tmethod: \"erpnext.manufacturing.doctype.bom_update_tool.bom_update_tool.enqueue_update_cost\",\n\t\t\tfreeze: true,\n\t\t\tcallback: function() {\n\t\t\t\tfrm.events.update_price_list(frm);\n\t\t\t}\n\t\t});\n\t},\n\n\tupdate_price_list: function(frm){\n\t\tfrappe.call({\n\t\t\tmethod:\"chemical.query.update_item_price_daily\",\n\t\t\tcallback: function(r){\n\t\t\t\tfrappe.msgprint(__(\"Latest price updated in all BOMs\"));\n\t\t\t}\n\t\t});\n\t}\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Sales Invoice", 
  "modified": "2019-06-13 17:53:15.871894", 
  "name": "Sales Invoice-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "this.frm.add_fetch('batch_no', 'packaging_material', 'packaging_material');\nthis.frm.add_fetch('batch_no', 'packing_size', 'packing_size');\nthis.frm.add_fetch('batch_no', 'sample_ref_no', 'lot_no');\nthis.frm.add_fetch('batch_no', 'batch_yield', 'batch_yield');\nthis.frm.add_fetch('batch_no', 'concentration', 'concentration');\n\n/* cur_frm.fields_dict.supplier_transporter.get_query = function(doc) {\n\treturn {\n\t\tfilters: {\n\t\t\t\"supplier_type\": \"Transporter\"\n\t\t}\n\t}\n}; */\n// Customer Address Filter\ncur_frm.set_query(\"customer_address\", function() {\n\treturn {\n\t\tquery: \"frappe.contacts.doctype.address.address.address_query\",\n\t\tfilters: { \n\t\t\tlink_doctype: \"Customer\", \n\t\t\tlink_name: cur_frm.doc.customer\n\t\t} \n\t};\n});\n// Shipping Address Filter\ncur_frm.set_query(\"shipping_address_name\", function() {\n\treturn {\n\t\tquery: \"frappe.contacts.doctype.address.address.address_query\",\n\t\tfilters: { link_doctype: \"Customer\", link_name: cur_frm.doc.customer} \n\t};\n});\n// Customer Contact Filter\ncur_frm.set_query(\"contact_person\", function() {\n\treturn {\n\t\tquery: \"frappe.contacts.doctype.contact.contact.contact_query\",\n\t\tfilters: { link_doctype: \"Customer\", link_name: cur_frm.doc.customer} \n\t};\n});\n// Add searchfield to Item query\nthis.frm.cscript.onload = function(frm) {\n\tthis.frm.set_query(\"item_code\", \"items\", function() {\n\t\treturn {\n\t\t\tquery: \"chemical.query.new_item_query\",\n\t\t\tfilters: {\n\t\t\t\t'is_sales_item': 1\n\t\t\t}\n\t\t}\n});\nthis.frm.set_query(\"batch_no\", \"items\", function(doc, cdt, cdn) {\n\t\tlet d = locals[cdt][cdn];\n\t\tif(!d.item_code){\n\t\t\tfrappe.throw(__(\"Please enter Item Code to get batch no\"));\n\t\t}\n\t\telse{\n\t\t\treturn {\n\t\t\t\tquery: \"chemical.batch_valuation.get_batch_no\",\n\t\t\t\tfilters: {\n\t\t\t\t\t'item_code': d.item_code,\n\t\t\t\t\t'warehouse': d.warehouse\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n\nfrappe.ui.form.on(\"Sales Invoice\", {\n\tbefore_save: function (frm) {\n\t\tfrm.trigger(\"cal_total\");\n\t\tfrm.trigger(\"box_cal\");\n\t\t\n\t\tfrappe.db.get_value(\"Company\",frm.doc.company,'abbr',function(r){\n\t\t\tif(frm.doc.is_opening == \"Yes\") {\n\t\t\t\t$.each(frm.doc.items || [], function(i, d) {\n\t\t\t\t\td.income_account = 'Temporary Opening - '+ r.abbr;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t\tfrm.doc.items.forEach(function(d){\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'chemical.api.get_customer_ref_code',\n\t\t\t\targs: {\n\t\t\t\t\t'item_code': d.item_code,\n\t\t\t\t\t'customer': frm.doc.customer,\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif(r.message){\n\t\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, 'item_name', r.message);\n\t\t\t\t\t\t//frappe.model.set_value(d.doctype, d.name, 'description', r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t},\n\tcal_total: function(frm) {\n\t\tlet total_qty = 0.0;\n\t\tlet total_packages = 0;\n\t\tlet total_net_wt =0.0;\n\t\tlet total_gr_wt =0.0;\n\t\tlet total_tare_wt = 0.0;\n\t\tlet total_pallets = 0;\n\t\t\n\t\tfrm.doc.items.forEach(function(d) {\n\t\t\t//frappe.model.set_value(d.doctype, d.name, 'gross_wt', (d.tare_wt + d.qty));\n\t\t\ttotal_qty += flt(d.qty);\t\n\t\t\ttotal_packages += flt(d.no_of_packages);\n\t\t\ttotal_net_wt += flt(d.net_wt);\n\t\t\td.total_tare_weight = flt(d.tare_wt * d.no_of_packages);\n\t\t\td.gross_wt = flt(d.total_tare_weight) + flt(d.qty);\n\t\t\ttotal_tare_wt += flt(d.total_tare_weight);\n\t\t\ttotal_gr_wt += flt(d.gross_wt);\n\t\t\ttotal_pallets += flt(d.total_pallets);\n\t\t});\n\t\tfrm.set_value(\"total_qty\", total_qty);\n\t\tfrm.set_value(\"total_packages\", total_packages);\n\t\tfrm.set_value(\"total_nt_wt\", total_net_wt);\n\t\tfrm.set_value(\"total_gr_wt\", total_gr_wt);\n\t\tfrm.set_value(\"total_tare_wt\", total_tare_wt);\n\t\tfrm.set_value(\"total_pallets\", total_pallets);\n\t},\n\tbox_cal: function(frm){\n\t\tfrm.doc.items.forEach(function(d, i) {\n\t\t\tif(i == 0){\n\t\t\t\td.packages_from = 1;\n\t\t\t\td.packages_to = d.no_of_packages;\n\t\t\t}\n\t\t\telse{\n\t\t\t\td.packages_from = Math.round(frm.doc.items[i - 1].packages_to + 1);\n\t\t\t\td.packages_to = Math.round(d.packages_from + d.no_of_packages - 1);\n\t\t\t}\n\t\t});\n\t\tfrm.refresh_field('items');\n\t},\n\tpallet_cal: function(frm){\n\t\tfrm.doc.items.forEach(function(d, i) {\n\t\t\tif(d.palleted){\n\t\t\t\tif(i == 0){\n\t\t\t\t\td.pallet_no_from = 1;\n\t\t\t\t\td.pallet_no_to = Math.round(d.total_pallets);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\td.pallet_no_from = Math.round(frm.doc.items[i - 1].pallet_no_to + 1);\n\t\t\t\t\td.pallet_no_to = Math.round(d.pallet_no_from + d.total_pallets - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tfrm.refresh_field('items');\n\t},\n});\nfrappe.ui.form.on(\"Sales Invoice Item\", {\n\titem_code: function(frm, cdt, cdn){\n\t\tlet d = locals[cdt][cdn];\n\t\tsetTimeout(function(){\n\t\t\tfrappe.db.get_value(\"Batch\", d.batch_no, ['packaging_material', 'packing_size', 'lot_no', 'batch_yield', 'concentration'], function(r){\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'packaging_material', r.packaging_material);\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'packing_size', r.packing_size);\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'lot_no', r.lot_no);\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'batch_yield', r.batch_yield);\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'concentration', r.concentration);\n\t\t\t})\n\t\t}, 1000)\n\t},\n\tqty: function(frm, cdt, cdn) {\n\t\tfrappe.model.set_value(cdt, cdn, \"no_of_packages\", flt(d.qty / d.packed_in));\n\t\tfrappe.model.set_value(cdt, cdn, \"total_pallets\", Math.round(d.qty / d.pallet_size));\n\t},\n\tpackaging_material: function(frm, cdt, cdn){\n\t\tlet d = locals[cdt][cdn];\n\t\tif (d.packaging_material == \"Box\"){\n\t\t\tfrappe.model.set_value(cdt, cdn, \"tare_wt\", \"1.5\");\n\t\t}\n\t\telse if (d.packaging_material == \"Jumbo Bag\"){\n\t\t\tfrappe.model.set_value(cdt, cdn, \"tare_wt\", \"2.5\");\n\t\t}\n\t\telse if (d.packaging_material == \"Drum\"){\n\t\t\tfrappe.model.set_value(cdt, cdn, \"tare_wt\", \"17.5\");\n\t\t}\n\t},\n\tpacked_in: function(frm, cdt, cdn) {\n\t\t// frm.events.cal_total(frm);\n\t\tlet d = locals[cdt][cdn];\n\t\tfrappe.model.set_value(cdt, cdn, \"no_of_packages\", flt(d.qty / d.packed_in));\t\n\t},\n\tpallet_size: function(frm, cdt, cdn) {\n\t\tfrappe.run_serially([\n\t\t\t() =>{\n\t\t\t\tlet d = locals[cdt][cdn];\n\t\t\t\tfrappe.model.set_value(cdt, cdn, \"total_pallets\", Math.round(d.qty / d.pallet_size));\n\t\t\t},\n\t\t\t() =>{\n\t\t\t\tfrm.events.pallet_cal(frm);\n\t\t\t}\n\t\t]);\n\t},\n\tno_of_packages: function(frm, cdt, cdn){\n\t\tfrm.events.box_cal(frm);\n\t}\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Delivery Note", 
  "modified": "2019-06-13 18:02:39.793639", 
  "name": "Delivery Note-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "this.frm.add_fetch('batch_no', 'packaging_material', 'packaging_material');\nthis.frm.add_fetch('batch_no', 'packing_size', 'packing_size');\nthis.frm.add_fetch('batch_no', 'lot_no', 'lot_no');\nthis.frm.add_fetch('batch_no', 'batch_yield', 'batch_yield');\nthis.frm.add_fetch('batch_no', 'concentration', 'concentration');\n\n// Add searchfield to Item query\nthis.frm.cscript.onload = function(frm) {\n\tthis.frm.set_query(\"item_code\", \"items\", function() {\n\t\treturn {\n\t\t\tquery: \"chemical.query.new_item_query\",\n\t\t\tfilters: {\n\t\t\t\t'is_sales_item': 1\n\t\t\t}\n\t\t}\n\t});\n\n\tthis.frm.set_query(\"batch_no\", \"items\", function(doc, cdt, cdn) {\n\t\tlet d = locals[cdt][cdn];\n\t\tif(!d.item_code){\n\t\t\tfrappe.throw(__(\"Please enter Item Code to get batch no\"));\n\t\t}\n\t\telse{\n\t\t\treturn {\n\t\t\t\tquery: \"chemical.batch_valuation.get_batch_no\",\n\t\t\t\tfilters: {\n\t\t\t\t\t'item_code': d.item_code,\n\t\t\t\t\t'warehouse': d.warehouse\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n}\n// Shipping Address Filter\ncur_frm.set_query(\"shipping_address_name\", function() {\n\treturn {\n\t\tquery: \"frappe.contacts.doctype.address.address.address_query\",\n\t\tfilters: { link_doctype: \"Customer\", link_name: cur_frm.doc.customer} \n\t};\n});\n\n// Customer Contact Filter\ncur_frm.set_query(\"contact_person\", function() {\n\treturn {\n\t\tquery: \"frappe.contacts.doctype.contact.contact.contact_query\",\n\t\tfilters: { link_doctype: \"Customer\", link_name: cur_frm.doc.customer} \n\t};\n});\n\nfrappe.ui.form.on(\"Delivery Note\", {\n\tbefore_save: function (frm) {\n\t\tfrm.doc.items.forEach(function(d){\n\t\t\tfrappe.call({\n\t\t\t\tmethod: 'chemical.api.get_customer_ref_code',\n\t\t\t\targs: {\n\t\t\t\t\t'item_code': d.item_code,\n\t\t\t\t\t'customer': frm.doc.customer,\n\t\t\t\t},\n\t\t\t\tcallback: function(r) {\n\t\t\t\t\tif(r.message){\n\t\t\t\t\t\tfrappe.model.set_value(d.doctype, d.name, 'item_name', r.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\tfrm.refresh_field('items');\n\t},\n});\nfrappe.ui.form.on(\"Delivery Note Item\", {\n\titem_code: function(frm, cdt, cdn){\n\t\tlet d = locals[cdt][cdn];\n\t\tsetTimeout(function(){\n\t\t\tfrappe.db.get_value(\"Batch\", d.batch_no, ['packaging_material', 'packing_size', 'lot_no', 'batch_yield', 'concentration'], function(r){\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'packaging_material', r.packaging_material);\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'packing_size', r.packing_size);\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'lot_no', r.lot_no);\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'batch_yield', r.batch_yield);\n\t\t\t\tfrappe.model.set_value(cdt, cdn, 'concentration', r.concentration);\n\t\t\t})\n\t\t}, 1000)\n\t},\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Sales Order", 
  "modified": "2019-06-15 11:15:13.875168", 
  "name": "Sales Order-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "this.frm.cscript.onload = function (frm) {\n\n    // Billing Address Filter\n    this.frm.set_query(\"customer_address\", function () {\n        return {\n            query: \"frappe.contacts.doctype.address.address.address_query\",\n            filters: { link_doctype: \"Customer\", link_name: cur_frm.doc.customer }\n        };\n    });\n\n    // Shipping Address Filter\n    this.frm.set_query(\"shipping_address_name\", function () {\n        return {\n            query: \"frappe.contacts.doctype.address.address.address_query\",\n            filters: { link_doctype: \"Customer\", link_name: cur_frm.doc.customer }\n        };\n    });\n\n    // Supplier Contact Filter\n    this.frm.set_query(\"contact_person\", function () {\n        return {\n            query: \"frappe.contacts.doctype.contact.contact.contact_query\",\n            filters: { link_doctype: \"Customer\", link_name: cur_frm.doc.customer }\n        };\n    });\n    // this.frm.fields_dict.items.grid.get_field(\"ref_no\").get_query = function (doc) {\n    //     return {\n    //         filters: {\n    //             \"product_name\": doc.items.item_code,\n    //         }\n    //     }\n    // };\n    cur_frm.fields_dict.items.grid.get_field(\"ref_no\").get_query = function (doc, cdt, cdn) {\n        let d = locals[cdt][cdn];\n        return {\n            filters: {\n                \"product_name\": d.item_code,\n            }\n        }\n    };\n}\n", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Purchase Receipt", 
  "modified": "2019-06-13 18:13:01.742060", 
  "name": "Purchase Receipt-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "frappe.ui.form.on(\"Purchase Receipt\", {\n\tbefore_save: function(frm){\n\t\tfrm.trigger('cal_qty');\n\t},\n\tcal_qty: function(frm){\n\t\tlet rec_qty = 0;\n\t\tfrm.doc.items.forEach(function(d){\n\t\t\tif(d.item_group == \"Raw Material\"){\n\t\t\t\trec_qty = (flt(d.packing_size)*flt(d.no_of_packages)*flt(d.concentration))/100;\n\t\t\t}\n\t\t\telse{\n\t\t\t\trec_qty = (flt(d.packing_size)*flt(d.no_of_packages));\n\t\t\t}\n\t\t\t\tfrappe.model.set_value(d.doctype,d.name,\"received_qty\",rec_qty);\n\t\t\t\tfrappe.model.set_value(d.doctype,d.name,\"qty\",rec_qty);\n\t\t\t\n\t\t});\n\t}\n});\n\nfrappe.ui.form.on(\"Purchase Receipt Item\", {\n\tpacking_size: function(frm, cdt, cdn){\n\t\tfrm.events.cal_qty(frm);\n\t},\n\tno_of_packages: function(frm, cdt, cdn){\n\t\tfrm.events.cal_qty(frm);\n\t},\n});", 
  "script_type": "Client"
 }, 
 {
  "docstatus": 0, 
  "doctype": "Custom Script", 
  "dt": "Purchase Order", 
  "modified": "2019-06-13 18:21:56.274286", 
  "name": "Purchase Order-Client", 
  "parent": null, 
  "parentfield": null, 
  "parenttype": null, 
  "script": "// Add searchfield to Item query\nthis.frm.cscript.onload = function(frm) {\n\tthis.frm.set_query(\"item_code\", \"items\", function() {\n\t\treturn {\n\t\t\tquery: \"chemical.query.new_item_query\",\n\t\t\tfilters: {\n\t\t\t\t'is_sales_item': 1\n\t\t\t}\n\t\t}\n\t});\n}\n// Supplier Address Filter\ncur_frm.set_query(\"supplier_address\", function() {\n\treturn {\n\t\tquery: \"frappe.contacts.doctype.address.address.address_query\",\n\t\tfilters: { link_doctype: \"Supplier\", link_name: cur_frm.doc.supplier} \n\t};\n});\n\n// Supplier Contact Filter\ncur_frm.set_query(\"contact_person\", function() {\n\treturn {\n\t\tquery: \"frappe.contacts.doctype.contact.contact.contact_query\",\n\t\tfilters: { link_doctype: \"Supplier\", link_name: cur_frm.doc.supplier} \n\t};\n});\n\n// Shipping Address Filter\ncur_frm.set_query(\"shipping_address\", function() {\n\treturn {\n\t\tquery: \"frappe.contacts.doctype.address.address.address_query\",\n\t\tfilters: { link_doctype: \"Company\", link_name: cur_frm.doc.company} \n\t};\n});", 
  "script_type": "Client"
 }
]